#!/usr/bin/env ruby
require "readline"

class String

  def colorize(color_code)
    "\e[#{color_code}m#{self}\e[0m"
  end

  def red; self.colorize(31); end
  def green; self.colorize(32); end
  def yellow; self.colorize(33); end

end

def prompt
  current_directory = Dir.pwd.split('/')[-1] || Dir.pwd
  "[RuSh] ".yellow + current_directory + " => ".green
end

BUILTINS = { }
BUILTINS['cd'] = lambda do | *path |
  path << ENV["HOME"] if path.empty?
  path = path.pop
  path = path.gsub /~/, ENV["HOME"]
  begin
    Dir.chdir path
  rescue Exception
    puts "[RuSh] ".yellow + "no such directory: #{path}".red
  end
end

BUILTINS['exit'] = lambda do | *code |
  code << 0 if code.empty?
  code = code.pop
  exit(code.to_i)
end

BUILTINS['exec'] = lambda do | *command |
  exec *command
end

BUILTINS['path'] = lambda do | *command |
  valid = true
  path_string = command.join ":"
  command.map { |path| valid &&= File.exists? path }
  if valid
    ENV["PATH"] += ":#{path_string}"
    puts "Added " + path_string.to_s.yellow + " to the PATH"
  else
    puts "[RuSh] ".yellow + "not valid path: #{path_string}".red
  end
end

unless ARGV.empty?
  # allow exiting now
  trap("INT") { puts "stopping #{ARGV}"; exit }

  begin
    File.open(ARGV[0], 'r').each_line do |line|
      eval line
    end
  rescue => err
    puts "Exception: #{err}"
  end
end

# don't go exiting on me.
trap("INT", 'SIG_IGN')

# add a '/' after completion
Readline.completion_append_character = "/"

# adding to PATH
ENV["PATH"] += ":/usr/local/bin"

while line = Readline.readline(prompt, true)
  command, *arguments = line.split(" ")

  # just move on if user gives nothing.
  next if command.nil?

  if BUILTINS[command]
    BUILTINS[command].call(*arguments)
  else
    child_pid = fork do
      begin
        exec line
      rescue SystemCallError
        puts "[RuSh] ".yellow + "command not found: #{command}".red
      end
    end
    Process.wait child_pid
  end
end

# NOT REACHED #