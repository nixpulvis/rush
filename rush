#!/usr/bin/env ruby
require "readline"

class String

  def colorize(color_code)
    "\e[#{color_code}m#{self}\e[0m"
  end

  def black; self.colorize(30); end
  def red; self.colorize(31); end
  def green; self.colorize(32); end
  def yellow; self.colorize(33); end
  def blue; self.colorize(34); end
  def magenta; self.colorize(35); end
  def cyan; self.colorize(36); end
  def white; self.colorize(37); end

end

RUSH_VERSION = "0.0.1"
RUSH_PROFILE = "#{ENV["HOME"]}/.rush_rc"

def ensure_profile
  return if File.exists? RUSH_PROFILE
  File.open(RUSH_PROFILE, "w") do |file|
    file.puts "# insert ruby code here."
    file.puts "ENV['PATH'] += ':/usr/local/bin'"
  end
end

def source( file )
  File.open(file, 'r').each_line do |line|
    eval line
  end
end

def prompt
  current_directory = Dir.pwd.split('/')[-1] || Dir.pwd
  current_directory + " => ".green
end

def rush_puts( text )
  puts "[RuSh] ".magenta + text
end

BUILTINS = { }
BUILTINS['cd'] = lambda do | *path |
  path << ENV["HOME"] if path.empty?
  path = path.pop
  path = path.gsub /~/, ENV["HOME"]
  begin
    Dir.chdir path
  rescue Exception
    rush_puts "no such directory: #{path}"
  end
end

BUILTINS['exit'] = lambda do | *code |
  code << 0 if code.empty?
  code = code.pop
  exit code.to_i
end

BUILTINS['exec'] = lambda do | *command |
  exec *command
end

BUILTINS['path'] = lambda do | *command |
  valid = true
  path_string = command.join ":"
  command.map { |path| valid &&= File.exists? path }
  if valid
    ENV["PATH"] += ":#{path_string}"
    puts "Added " + path_string.to_s.yellow + " to the PATH"
  else
    rush_puts "not valid path: #{path_string}"
  end
end

BUILTINS['version'] = lambda do | *command |
  rush_puts RUSH_VERSION
end

BUILTINS['builtins'] = lambda do | *command |
  rush_puts "listing all built in functions:"
  BUILTINS.each_key { |key| puts key }
end

BUILTINS['source'] = lambda do | *command |
  if command.empty?
    rush_puts "filename argument required"
    return
  end
  source command.pop
end

# evaluation a script file
unless ARGV.empty?
  # allow exiting now
  trap("INT") { puts "Stopping #{ARGV}"; exit }

  # Don't show the fucking ^C (or anything for that matter)
  system "stty -echo"

  begin
    File.open(ARGV[0], 'r').each_line do |line|
      eval line
    end
  rescue => e
    puts e.backtrace
  end
end

# don't go exiting on me.
trap("INT", 'SIG_IGN')

# evaluate ruby inside of RUSH_PROFILE
ensure_profile
source RUSH_PROFILE

Readline.completion_append_character = nil
Readline.completion_proc = Proc.new do | current_word |
  current_word.gsub! /~/, ENV["HOME"]
  Dir["#{current_word}*"].map! do |suggestion|
    if File.directory? suggestion
      suggestion += "/"
    else
      suggestion
    end
  end
end

while line = Readline.readline(prompt, true)
  command, *arguments = line.split(" ")

  # just move on if user gives nothing.
  next if command.nil?

  if BUILTINS[command]
    BUILTINS[command].call(*arguments)
  else
    child_pid = fork do
      begin
        exec line
      rescue SystemCallError
        rush_puts "command not found: #{command}"
      end
    end
    Process.wait child_pid
  end
end

# NOT REACHED #